import os
from typing import Union, Iterable
import numpy as np
from . import fileio


# TODO: Remove type checks for now, for Python2 compatibility

class DistanceDistribution(object):
    """
    A Prcurve represents the P(r) distribution that results from the fourier transform of SAXS data into real space.

    Attributes
    ----------
    distances : array_like
        Real space distances (r), usually in angstroms, at which the values of the distance distribution is sampled.
        Must be sorted and contain only positive values.
    pvals : array_like
        The relative probability of each distance given in `distances` (P(r)). Generally these values are always
        positive, although programs that attempt to derive these from scattering data (e.g., GNOM) can give negative
        values.
    error : array_like
        The uncertainty of each r,P(r) point. This parameter/attribute has little meaning, because r, P(r) pairs are
        either based on absolute distances from given atomic coordinates or generated from fourier transformation of
        SAXS data, for which the errors are difficult to approximate. This parameter/attribute is provided mostly for
        compatibility for GNOM output.
    name : string
        User-friendly identifier for this P(r) dataset.

    Parameters
    ----------
    normalize_to_unity : bool
        If True, the provided `pvals` will be rescaled to ensure that the area under this distribution is unity (1.0)
    """

    def __init__(self, distances: Union[np.ndarray, Iterable], pvals: Union[np.ndarray, Iterable],
                 error: Union[np.ndarray, Iterable] = None, name: str = None, normalize_to_unity: bool = False):
        # turn into numpy arrays first for fast length equality checks
        distances = np.array(distances, copy=True, dtype=np.float64)
        pvals = np.array(pvals, copy=True, dtype=np.float64)
        if error is not None:
            error = np.array(error, copy=True, dtype=np.float64)

        # parameter checks
        if distances is None or pvals is None or len(distances) != len(pvals) \
                or (error is not None and len(error) != len(distances)):
            raise ValueError("Distance distributions should be constructed of two or three equal length arrays of "
                             "values")
        elif not np.all(distances[:-1] <= distances[1:]):
            raise ValueError("Provided distances array should be sorted")
        elif not np.all(distances >= 0.0):
            raise ValueError("Negative distances are not supported at this time")
        else:
            self.distances = distances
            self.pvals = pvals
            self.error = error
            self.name = name
            if normalize_to_unity:
                self.normalize_to_unity_area()

    @property
    def dmax(self):
        """
        dmax is the longest distance r in the distribution where P(r) >= 0.0
        """
        return self.distances[self.pvals >= 0.0][-1]

    def normalize_to_unity_area(self):
        """
        Scale the `pvals` of this distribution so that this distribution will have unity (= 1.0) area.
        """
        area = np.trapz(self.pvals, x=self.distances)
        self.pvals /= area
        if self.error is not None:
            self.error /= area

    @property
    def real_space_rg(self):
        """
        The radius of gyration of this distance distribution, which is calculated as the integral of P(r) with respect
        to distances**2 after the distribution is normalized to unity area.
        """
        # Can't be sure if this distribution is unity area
        area = np.trapz(self.pvals, x=self.distances)
        d2 = np.square(self.distances)
        return np.trapz(self.pvals / area, x=d2)


def read_gnom_file(path):
    """
    Parse a file generated by the ATSAS program GNOM.

    GNOM is the most common program used to derive distance distributions from scattering data. Generally, the resulting
    output file has the extension ".out"

    Parameters
    ----------
    path : string
        A string that contains a valid path to the file to be read.

    Returns
    -------
    DistanceDistribution
        The distance distribution contained within the GNOM output file.
    """
    f = open(fileio.fix_filepath(path), 'rU')
    # skip ahead to the relevant starting line
    for line in f:
        tokens = line.strip().split()
        if tokens == ['R', 'P(R)', 'ERROR']:
            break
    # Some versions of GNOM leave a footer in this file. For now, the fileio.load_data_columns file will weed those out

    ret = DistanceDistribution(*fileio.load_data_columns(file_handle=f), name=os.path.basename(path))
    f.close()
    return ret


def read_distancedistribution_file(path):
    return DistanceDistribution(*fileio.load_data_columns(path), name=os.path.basename(path))
